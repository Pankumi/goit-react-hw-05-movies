{"version":3,"file":"static/js/715.fa008837.chunk.js","mappings":"kSAAaA,EAAO,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,gBAErB,OACE,wBACGA,EAAgBC,KAAI,SAAAC,GACnB,OACE,0BACGC,QAAQD,EAAGE,gBACV,gBACEC,IAAG,yCAAoCH,EAAGE,cAC1CE,IAAKJ,EAAGK,KACRC,MAAM,WAGV,uBAAIN,EAAGK,QACP,uBAAIL,EAAGO,cATAP,EAAGQ,GAYf,KAGN,E,QCfYC,EAAgB,WAC3B,OAAkCC,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA8CF,EAAAA,EAAAA,UAAS,IAAvD,eAAOZ,EAAP,KAAwBe,EAAxB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAoBR,OAlBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,mCAAG,6FACjBN,EAAmB,IACnBE,EAAS,MAFQ,SAIfH,GAAa,GAJE,UAKQQ,EAAAA,EAAAA,IAAiBJ,GALzB,gBAKPK,EALO,EAKPA,KACRR,EAAmBQ,GANJ,kDAQfC,QAAQC,IAAI,UAAZ,MACAR,EAAS,KAAIS,SATE,yBAWfZ,GAAa,GAXE,6EAAH,qDAchBO,GACD,GAAE,CAACH,KAGF,gCACGL,IAAa,SAACc,EAAA,EAAD,IACbxB,QAAQa,KAAU,kEAA0CA,KACjC,IAA3BhB,EAAgB4B,SACf,kEAED5B,EAAgB4B,OAAS,IAAK,SAAC7B,EAAD,CAAMC,gBAAiBA,MAG3D,EAED,G,+LCvCM6B,EAAW,+BACXC,EAAU,mCAGHC,EAAkB,mCAAG,WAAMC,GAAN,uFACTC,EAAAA,EAAAA,IAAA,UAAaJ,EAAb,uBAA4C,CACjEK,OAAQ,CACNC,QAASL,EACTE,KAAMA,GAAQ,KAJc,cAC1BI,EAD0B,yBAOzBA,EAASC,MAPgB,2CAAH,sDAUlBC,EAAiB,mCAAG,WAAMC,GAAN,uFACRN,EAAAA,EAAAA,IAAA,UAAaJ,EAAb,iBAAsC,CAC3DK,OAAQ,CACNC,QAASL,EACTU,MAAOD,KAJoB,cACzBH,EADyB,yBAOxBA,EAASC,MAPe,2CAAH,sDAUjBI,EAAS,mCAAG,WAAMC,GAAN,uFACAT,EAAAA,EAAAA,IAAA,UAAaJ,EAAb,kBAA+Ba,GAAW,CAC/DR,OAAQ,CACNC,QAASL,KAHU,cACjBM,EADiB,yBAMhBA,EAASC,MANO,2CAAH,sDASTf,EAAgB,mCAAG,WAAMoB,GAAN,uFACPT,EAAAA,EAAAA,IAAA,UAAaJ,EAAb,kBAA+Ba,EAA/B,YAAkD,CACvER,OAAQ,CACNC,QAASL,EACTa,SAAU,WAJgB,cACxBP,EADwB,yBAOvBA,EAASC,MAPc,2CAAH,sDAUhBO,EAAgB,mCAAG,WAAOF,EAASV,GAAhB,uFACPC,EAAAA,EAAAA,IAAA,UAAaJ,EAAb,kBAA+Ba,EAA/B,YAAkD,CACvER,OAAQ,CACNC,QAASL,EACTa,SAAU,QACVX,KAAMA,GAAQ,KALY,cACxBI,EADwB,yBAQvBA,EAASC,MARc,2CAAH,uD","sources":["components/Cast/Cast.jsx","pages/MovieCastPage/MovieCastPage.jsx","services/themoviedbApi.js"],"sourcesContent":["export const Cast = ({ serviceResponse }) => {\n\n  return (\n    <ul>\n      {serviceResponse.map(el => {\n        return (\n          <li key={el.id}>\n            {Boolean(el.profile_path) && (\n              <img\n                src={`https://image.tmdb.org/t/p/w500${el.profile_path}`}\n                alt={el.name}\n                width=\"150px\"\n              />\n            )}\n            <p>{el.name}</p>\n            <p>{el.character}</p>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getFilmIdCredits } from '../../services/themoviedbApi';\nimport { Cast } from '../../components/Cast/Cast';\nimport { Loader } from '../../components/Loader/Loader';\n\nexport const MovieCastPage = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [serviceResponse, setServiceResponse] = useState([]);\n  const [error, setError] = useState(null);\n  const { movieiD } = useParams();\n\n  useEffect(() => {\n    const runRequest = async () => {\n      setServiceResponse([]);\n      setError(null);\n      try {\n        setIsLoading(true);\n        const { cast } = await getFilmIdCredits(movieiD);\n        setServiceResponse(cast);\n      } catch (err) {\n        console.log('err >> ', err);\n        setError(err.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    runRequest();\n  }, [movieiD]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {Boolean(error) && <p> Oops, some arror occured... Massage: {error}</p>}\n      {serviceResponse.length === 0 && (\n        <p>We don`t have any cast for this movie.</p>\n      )}\n      {serviceResponse.length > 0 && <Cast serviceResponse={serviceResponse} />}\n    </>\n  );\n};\n\nexport default MovieCastPage;\n","// $ npm install axios\nimport axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'a95ff59f8d48ac961c2785119723c43c';\n\n// https://api.themoviedb.org/3/trending/movie/day?api_key=a95ff59f8d48ac961c2785119723c43c\nexport const getPopularFilmList = async page => {\n  const response = await axios.get(`${BASE_URL}/trending/movie/day`, {\n    params: {\n      api_key: API_KEY,\n      page: page || 1,\n    },\n  });\n  return response.data;\n};\n\nexport const getSearchFilmList = async keyWord => {\n  const response = await axios.get(`${BASE_URL}/search/movie`, {\n    params: {\n      api_key: API_KEY,\n      query: keyWord,\n    },\n  });\n  return response.data;\n};\n\nexport const getFilmID = async movieId => {\n  const response = await axios.get(`${BASE_URL}/movie/${movieId}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n};\n\nexport const getFilmIdCredits = async movieId => {\n  const response = await axios.get(`${BASE_URL}/movie/${movieId}/credits`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n  return response.data;\n};\n\nexport const getFilmIdReviews = async (movieId, page) => {\n  const response = await axios.get(`${BASE_URL}/movie/${movieId}/reviews`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n      page: page || 1,\n    },\n  });\n  return response.data;\n};\n"],"names":["Cast","serviceResponse","map","el","Boolean","profile_path","src","alt","name","width","character","id","MovieCastPage","useState","isLoading","setIsLoading","setServiceResponse","error","setError","movieiD","useParams","useEffect","runRequest","getFilmIdCredits","cast","console","log","message","Loader","length","BASE_URL","API_KEY","getPopularFilmList","page","axios","params","api_key","response","data","getSearchFilmList","keyWord","query","getFilmID","movieId","language","getFilmIdReviews"],"sourceRoot":""}