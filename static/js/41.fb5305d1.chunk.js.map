{"version":3,"file":"static/js/41.fb5305d1.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-05-movies/./src/pages/MoviePage/MovieP.module.css?8e76","pages/MoviePage/MoviePage.jsx","services/themoviedbApi.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"Poster\":\"MovieP_Poster__7A1Bd\",\"AdditionalInfo\":\"MovieP_AdditionalInfo__Vd9tI\"};","import React, { useState, useEffect } from 'react';\nimport { useParams, NavLink, Outlet, useLocation } from 'react-router-dom';\nimport { getFilmID } from '../../services/themoviedbApi';\nimport { Loader } from '../../components/Loader/Loader';\nimport css from './MovieP.module.css';\n\nexport const MoviePage = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [filmInfo, setFilmInfo] = useState(null);\n  const [error, setError] = useState(null);\n  const { movieiD } = useParams();\n\n  const location = useLocation();\n  console.log('MoviePage location >>', location);\n\n  useEffect(() => {\n    setFilmInfo(null);\n    setError(null);\n    if (!Boolean(movieiD)) return;\n    const runRequest = async () => {\n      setIsLoading(true);\n      try {\n        const data = await getFilmID(movieiD);\n        setFilmInfo(data);\n      } catch (err) {\n        console.log('err >> ', err);\n        setError(err.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    runRequest();\n  }, [movieiD]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {Boolean(error) && <p>Oops, some arror occured... Massage: {error}</p>}\n      {Boolean(filmInfo) && (\n        <div>\n          <NavLink to={location.state?.from ?? '/'}>\n            <button type=\"button\"> ‚Üê Go back</button>\n          </NavLink>\n\n          <div>\n            {Boolean(filmInfo.poster_path) && (\n              <img\n                className={css.Poster}\n                src={`https://image.tmdb.org/t/p/w500${filmInfo.poster_path}`}\n                alt={filmInfo.title}\n                width=\"300px\"\n              />\n            )}\n            <div>\n              <p>{filmInfo.title}</p>\n              <p>Uset Score: {Math.round(filmInfo.popularity)}%</p>\n              <p>Overview</p>\n              <p>{filmInfo.overview}</p>\n              <p>Genres</p>\n              <p>{filmInfo.genres.map(el => `${el.name} `)}</p>\n            </div>\n          </div>\n\n          <div className={css.AdditionalInfo}>\n            <p>Additional Information</p>\n            <ul>\n              <li>\n                <NavLink to=\"cast\" state={{from: location.state?.from ?? '/'}} >\n                  {' '}\n                  <p>Cast</p>{' '}\n                </NavLink>\n              </li>\n              <li>\n                <NavLink to=\"revievs\" state={{from: location.state?.from ?? '/'}} >\n                  {' '}\n                  <p>Revievs</p>{' '}\n                </NavLink>\n              </li>\n            </ul>\n          </div>\n          <Outlet/>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default MoviePage;\n","// $ npm install axios\nimport axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'a95ff59f8d48ac961c2785119723c43c';\n\n// https://api.themoviedb.org/3/trending/movie/day?api_key=a95ff59f8d48ac961c2785119723c43c\nexport const getPopularFilmList = async page => {\n  const response = await axios.get(`${BASE_URL}/trending/movie/day`, {\n    params: {\n      api_key: API_KEY,\n      page: page || 1,\n    },\n  });\n  return response.data;\n};\n\nexport const getSearchFilmList = async keyWord => {\n  const response = await axios.get(`${BASE_URL}/search/movie`, {\n    params: {\n      api_key: API_KEY,\n      query: keyWord,\n    },\n  });\n  return response.data;\n};\n\nexport const getFilmID = async movieId => {\n  const response = await axios.get(`${BASE_URL}/movie/${movieId}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n};\n\nexport const getFilmIdCredits = async movieId => {\n  const response = await axios.get(`${BASE_URL}/movie/${movieId}/credits`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n  return response.data;\n};\n\nexport const getFilmIdReviews = async (movieId, page) => {\n  const response = await axios.get(`${BASE_URL}/movie/${movieId}/reviews`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n      page: page || 1,\n    },\n  });\n  return response.data;\n};\n"],"names":["MoviePage","useState","isLoading","setIsLoading","filmInfo","setFilmInfo","error","setError","movieiD","useParams","location","useLocation","console","log","useEffect","Boolean","runRequest","getFilmID","data","message","Loader","to","state","from","type","poster_path","className","css","src","alt","title","width","Math","round","popularity","overview","genres","map","el","name","BASE_URL","API_KEY","getPopularFilmList","page","axios","params","api_key","response","getSearchFilmList","keyWord","query","movieId","getFilmIdCredits","language","getFilmIdReviews"],"sourceRoot":""}