{"version":3,"file":"static/js/526.6e002f1e.chunk.js","mappings":"qSAAaA,EAAU,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,gBACxB,OACE,wBACGA,EAAgBC,KAAI,SAAAC,GACnB,OACE,2BACE,qCAAaA,EAAGC,WAChB,uBAAID,EAAGE,YAFAF,EAAGG,GAKf,KAGN,E,QCPYC,EAAmB,WAC9B,OAAkCC,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA8CF,EAAAA,EAAAA,UAAS,IAAvD,eAAOP,EAAP,KAAwBU,EAAxB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAoBR,OAlBAE,EAAAA,EAAAA,YAAU,WACRL,EAAmB,IACnBE,EAAS,MACT,IAAMI,EAAU,mCAAG,sGAEfP,GAAa,GAFE,UAGWQ,EAAAA,EAAAA,IAAiBJ,GAH5B,gBAGPK,EAHO,EAGPA,QACRR,EAAmBQ,GAJJ,gDAMfC,QAAQC,IAAI,UAAZ,MACAR,EAAS,KAAIS,SAPE,yBASfZ,GAAa,GATE,4EAAH,qDAYhBO,GACD,GAAE,CAACH,KAGF,gCACGL,IAAa,SAACc,EAAA,EAAD,IACbC,QAAQZ,KAAU,kEAA0CA,KACjC,IAA3BX,EAAgBwB,SACf,qEAEDxB,EAAgBwB,OAAS,IACxB,SAACzB,EAAD,CAASC,gBAAiBA,MAIjC,EAED,G,+LCzCMyB,EAAW,+BACXC,EAAU,mCAGHC,EAAkB,mCAAG,WAAMC,GAAN,uFACTC,EAAAA,EAAAA,IAAA,UAAaJ,EAAb,uBAA4C,CACjEK,OAAQ,CACNC,QAASL,EACTE,KAAMA,GAAQ,KAJc,cAC1BI,EAD0B,yBAOzBA,EAASC,MAPgB,2CAAH,sDAUlBC,EAAiB,mCAAG,WAAMC,GAAN,uFACRN,EAAAA,EAAAA,IAAA,UAAaJ,EAAb,iBAAsC,CAC3DK,OAAQ,CACNC,QAASL,EACTU,MAAOD,KAJoB,cACzBH,EADyB,yBAOxBA,EAASC,MAPe,2CAAH,sDAUjBI,EAAS,mCAAG,WAAMC,GAAN,uFACAT,EAAAA,EAAAA,IAAA,UAAaJ,EAAb,kBAA+Ba,GAAW,CAC/DR,OAAQ,CACNC,QAASL,KAHU,cACjBM,EADiB,yBAMhBA,EAASC,MANO,2CAAH,sDASTM,EAAgB,mCAAG,WAAMD,GAAN,uFACPT,EAAAA,EAAAA,IAAA,UAAaJ,EAAb,kBAA+Ba,EAA/B,YAAkD,CACvER,OAAQ,CACNC,QAASL,EACTc,SAAU,WAJgB,cACxBR,EADwB,yBAOvBA,EAASC,MAPc,2CAAH,sDAUhBhB,EAAgB,mCAAG,WAAOqB,EAASV,GAAhB,uFACPC,EAAAA,EAAAA,IAAA,UAAaJ,EAAb,kBAA+Ba,EAA/B,YAAkD,CACvER,OAAQ,CACNC,QAASL,EACTc,SAAU,QACVZ,KAAMA,GAAQ,KALY,cACxBI,EADwB,yBAQvBA,EAASC,MARc,2CAAH,uD","sources":["components/Reviews/Reviews.jsx","pages/MovieReviewsPage/MovieReviewsPage.jsx","services/themoviedbApi.js"],"sourcesContent":["export const Reviews = ({ serviceResponse }) => {\n  return (\n    <ul>\n      {serviceResponse.map(el => {\n        return (\n          <li key={el.id}>\n            <h3>Author: {el.author}</h3>\n            <p>{el.content}</p>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getFilmIdReviews } from '../../services/themoviedbApi';\nimport { Reviews } from '../../components/Reviews/Reviews';\nimport { Loader } from '../../components/Loader/Loader';\n\nexport const MovieReviewsPage = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [serviceResponse, setServiceResponse] = useState([]);\n  const [error, setError] = useState(null);\n  const { movieiD } = useParams();\n\n  useEffect(() => {\n    setServiceResponse([]);\n    setError(null);\n    const runRequest = async () => {\n      try {\n        setIsLoading(true);\n        const { results } = await getFilmIdReviews(movieiD);\n        setServiceResponse(results);\n      } catch (err) {\n        console.log('err >> ', err);\n        setError(err.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    runRequest();\n  }, [movieiD]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {Boolean(error) && <p> Oops, some arror occured... Massage: {error}</p>}\n      {serviceResponse.length === 0 && (\n        <p>We don`t have any reviews for this movie.</p>\n      )}\n      {serviceResponse.length > 0 && (\n        <Reviews serviceResponse={serviceResponse} />\n      )}\n    </>\n  );\n};\n\nexport default MovieReviewsPage;\n","// $ npm install axios\nimport axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'a95ff59f8d48ac961c2785119723c43c';\n\n// https://api.themoviedb.org/3/trending/movie/day?api_key=a95ff59f8d48ac961c2785119723c43c\nexport const getPopularFilmList = async page => {\n  const response = await axios.get(`${BASE_URL}/trending/movie/day`, {\n    params: {\n      api_key: API_KEY,\n      page: page || 1,\n    },\n  });\n  return response.data;\n};\n\nexport const getSearchFilmList = async keyWord => {\n  const response = await axios.get(`${BASE_URL}/search/movie`, {\n    params: {\n      api_key: API_KEY,\n      query: keyWord,\n    },\n  });\n  return response.data;\n};\n\nexport const getFilmID = async movieId => {\n  const response = await axios.get(`${BASE_URL}/movie/${movieId}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n};\n\nexport const getFilmIdCredits = async movieId => {\n  const response = await axios.get(`${BASE_URL}/movie/${movieId}/credits`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n  return response.data;\n};\n\nexport const getFilmIdReviews = async (movieId, page) => {\n  const response = await axios.get(`${BASE_URL}/movie/${movieId}/reviews`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n      page: page || 1,\n    },\n  });\n  return response.data;\n};\n"],"names":["Reviews","serviceResponse","map","el","author","content","id","MovieReviewsPage","useState","isLoading","setIsLoading","setServiceResponse","error","setError","movieiD","useParams","useEffect","runRequest","getFilmIdReviews","results","console","log","message","Loader","Boolean","length","BASE_URL","API_KEY","getPopularFilmList","page","axios","params","api_key","response","data","getSearchFilmList","keyWord","query","getFilmID","movieId","getFilmIdCredits","language"],"sourceRoot":""}