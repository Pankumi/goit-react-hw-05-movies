{"version":3,"file":"static/js/604.b22decdd.chunk.js","mappings":"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","sources":["components/MovieList/MovieList.jsx","components/SearchBar/SearchBar.module.css","components/SearchBar/SearchBar.jsx","pages/SearchMoviesPage/SearchMoviesPage.jsx","services/themoviedbApi.js"],"sourcesContent":["import { Link } from 'react-router-dom';\n\nexport const MovieList = ({ movies, location }) => {\n  let list = movies.results;\n\n  return (\n    <ul>\n      {list.map(el => {\n        const { id, title } = el;\n        return (\n          <li key={id}>\n            <Link state={{from: location}} to={`/movies/${id}`}>\n              <p>{title}</p>\n            </Link>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default MovieList;\n","// extracted by mini-css-extract-plugin\nexport default {\"SearchBar\":\"SearchBar_SearchBar__MQiwu\",\"SearchForm\":\"SearchBar_SearchForm__J+i1a\",\"SearchForm_button\":\"SearchBar_SearchForm_button__WJfDq\",\"SearchForm_input\":\"SearchBar_SearchForm_input__-FIrC\",\"SearchForm-input\":\"SearchBar_SearchForm-input__pGYri\"};","import React, { useState } from 'react';\nimport css from './SearchBar.module.css';\n\nexport const SearchBar = ({ setSearchParams, defaultValue }) => {\n  const [searchValue, setSearchValue] = useState('');\n\n  const handleChange = evt => {\n    setSearchValue(evt.target.value);\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    setSearchParams({ query: searchValue });\n    reset();\n  };\n\n  const reset = () => {\n    setSearchValue('');\n  };\n\n  return (\n    <section className={css.SearchBar}>\n      <form className={css.SearchForm} onSubmit={handleSubmit}>\n        <input\n          className={css.SearchForm_input}\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search images and photos\"\n          name=\"searchValue\"\n          value={searchValue}\n          defaultValue={defaultValue} // (зразок) не працює разом з value, щоб працювало треба переписати useState на useRef (21.02.23 0:45)\n          onChange={handleChange}\n          required\n        />\n        <button className={css.SearchForm_button} type=\"submit\">\n          Search\n        </button>\n      </form>\n    </section>\n  );\n};\n\nexport default SearchBar;\n","import React, { useState, useEffect } from 'react';\nimport { useLocation, useSearchParams } from 'react-router-dom';\nimport MovieList from '../../components/MovieList/MovieList';\nimport SearchBar from '../../components/SearchBar/SearchBar';\nimport { getSearchFilmList } from '../../services/themoviedbApi';\nimport { Loader } from '../../components/Loader/Loader';\n\nexport const SearchMoviesPage = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchList, setSearchList] = useState([]);\n  const [error, setError] = useState(null);\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const MyQuery = searchParams.get('query');  // виймаю пошуковий запит з адресної строки\n\n  const location = useLocation();\n  console.log('SearchMoviesPage location >>', location);\n\n  useEffect(() => {\n    setSearchList([]);\n    setError(null);\n    if (MyQuery === null) return;\n    const runRequest = async () => {\n      try {\n        setIsLoading(true);\n        const data = await getSearchFilmList(MyQuery);\n        setSearchList(data);\n      } catch (err) {\n        console.log('err >> ', err);\n        setError(err.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    runRequest();\n  }, [MyQuery]);\n\n  return (\n    <div>\n      {isLoading && <Loader />}\n      <SearchBar setSearchParams={setSearchParams} defaultValue={MyQuery} />\n      {searchList.length !== 0 && <MovieList movies={searchList} location={location} />}\n      {Boolean(error) && <p>Oops, some arror occured... Massage: {error}</p>}\n    </div>\n  );\n};\nexport default SearchMoviesPage;","// $ npm install axios\nimport axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'a95ff59f8d48ac961c2785119723c43c';\n\n// https://api.themoviedb.org/3/trending/movie/day?api_key=a95ff59f8d48ac961c2785119723c43c\nexport const getPopularFilmList = async page => {\n  const response = await axios.get(`${BASE_URL}/trending/movie/day`, {\n    params: {\n      api_key: API_KEY,\n      page: page || 1,\n    },\n  });\n  return response.data;\n};\n\nexport const getSearchFilmList = async keyWord => {\n  const response = await axios.get(`${BASE_URL}/search/movie`, {\n    params: {\n      api_key: API_KEY,\n      query: keyWord,\n    },\n  });\n  return response.data;\n};\n\nexport const getFilmID = async movieId => {\n  const response = await axios.get(`${BASE_URL}/movie/${movieId}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n};\n\nexport const getFilmIdCredits = async movieId => {\n  const response = await axios.get(`${BASE_URL}/movie/${movieId}/credits`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n  return response.data;\n};\n\nexport const getFilmIdReviews = async (movieId, page) => {\n  const response = await axios.get(`${BASE_URL}/movie/${movieId}/reviews`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n      page: page || 1,\n    },\n  });\n  return response.data;\n};\n"],"names":["movies","location","list","results","map","el","id","title","state","from","to","setSearchParams","defaultValue","useState","searchValue","setSearchValue","reset","className","css","onSubmit","evt","preventDefault","query","type","autoComplete","autoFocus","placeholder","name","value","onChange","target","required","SearchMoviesPage","isLoading","setIsLoading","searchList","setSearchList","error","setError","useSearchParams","searchParams","MyQuery","get","useLocation","console","log","useEffect","runRequest","getSearchFilmList","data","message","Loader","length","MovieList","Boolean","BASE_URL","API_KEY","getPopularFilmList","page","axios","params","api_key","response","keyWord","getFilmID","movieId","getFilmIdCredits","language","getFilmIdReviews"],"sourceRoot":""}